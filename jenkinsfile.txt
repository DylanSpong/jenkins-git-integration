pipeline{
    agent any
    environment {
        DIRECTORY_PATH = "SIT223"
        TESTING_ENVIRONMENT = "TestEnv"
        PRODUCTION_ENVIRONMENT = "DylanSpong"
    }
    stages{
        stage('Build'){
            steps{
                echo "Build Started"
                echo "Fetch source code from $DIRECTORY_PATH"
                echo "Compiling code using Maven"
                echo "Build complete"
            }
        }
        stage('Unit and Integration Test'){
            steps{
                echo "Testing started"
                echo "Completing unit testing with Katalon"
                echo "Completing integration testing with Katalon"
                echo "Unit and integration testing complete"
                    script {
                    
                    def testLog = ""

                    def result = sh(script: 'echo "This is a log message"', returnStdout: true).trim()
                    logContent += result + "\n"

                    result = sh(script: 'echo "Another log message"', returnStdout: true).trim()
                    logContent += result + "\n"

                    writeFile file: 'test.log', text: logContent

                    archiveArtifacts artifacts: 'test.log', allowEmptyArchive: true
                    echo "Logs have been captured and saved to test.log"
                }                
            post{
                success{
                    emailext(
                        to: "dspong127@gmail.com",
                        subject: "Testing Status Email",
                        body: "Testing successful",
                        attachLog: true,
                        attachmentsPattern = 'test.log'
                        )
                    }
                failure{
                    emailext(
                        to: "dspong127@gmail.com",
                        subject: "Testing Status Email",
                        body: "Testing failed",
                        attachLog: true
                    )
                }
            }
        }
        stage('Code Analysis'){
            steps{
                echo "Quality Check started"
                echo "Checking quality of code with Coverity"
                echo "Quality Check complete"
            }
        }
        stage('Security Scan'){
            steps{
                echo "Security scan started"
                echo "Scanning with Burp Suite"
                echo "Security scan complete"
            }
            post{
                success{
                    mail to: "dspong127@gmail.com",
                    subject: "Security Status Email",
                    body: "Security scan did not detect any malicious code"
                }
                failure{
                    mail to: "dspong127@gmail.com",
                    subject: "Security Status Email",
                    body: "Security scan detected malicious code"
                }
            }
        }
        stage('Deployment to staging server'){
            steps{
                echo "Deployment started"
                echo "Deploying application to $TESTING_ENVIRONMENT on AWS EC2 server"
                echo "Deployment complete"
            }
        }
        stage('Integration testing'){
            steps{
                echo "Integration test started"
                sleep 10
                echo "Integration test complete"
            }
        }
        stage('Deploy to production'){
            steps{
                echo "Production started"
                echo "Product Deployed to $PRODUCTION_ENVIRONMENT on AWS EC2 server"
                echo "Production complete"
            }
        }
    }
}
